title - Boolean Expressions in Ruby

.section :introduction_to_ruby_expressions, "Beginner's Guide to Expressions in Ruby", 171
  %p
    Ruby uses the <code>==</code> operator for comparing two objects.
  %p
    Let us try a simple exercise: write an expression that checks whether the value of the variable <code>name</code> is <code>"Bob"</code>:
    !enchant 3532
      exercise!
      short_name :expression_exercise_simple_equals_to

      code_wrapper <<-DATA
        def user_code(name)
          <%= user_code %>
        end
      DATA

      solution <<-DATA
        name == "Bob"
      DATA

      specs <<-DATA
        it "name is verified to be 'Bob'" do
          user_code("Bob").should eq true
          user_code("Jill").should eq false
        end
      DATA
    !release

  %p
    The other usual operators like greater than (>), less than (<), greater than or equal to (>=) etc. are supported.
    The next exercise is to write an expression that validates whether <code>age</code> is less than or equal to </code>35</code>.

    !enchant 3533
      exercise!
      short_name :expression_exercise_simple_less_equals_to

      starting_code "age  # change this expression"
      code_wrapper <<-DATA
        def user_code(age)
          <%= user_code %>
        end
      DATA

      solution <<-DATA
        age <= 35
      DATA

      specs <<-DATA
        it "age 30 is acceptable" do
          user_code(30).should eq true
        end
        it "age 60 is not acceptable" do
          user_code(60).should eq false
        end
      DATA
    !release

  %p
    Boolean expressions like the above always return either the <code>true</code> or <code>false</code>
    objects.

  %h3 Combining Expressions using the <code>&&</code> and <code>||</code> operators

  %p
    You can use the keywords <code>||</code> (read as 'or'), <code>&&</code> (read as 'and') to combine expressions. 
    Try modifying the following expression to check whether <code>age</code> is greater than or equal 
    to <code>23</code> and the name is either <code>Bob</code> or <code>Jill</code>.
    
    !enchant 3534
      exercise!
      short_name :expression_exercise_combining_expressions
      starting_code "age >= 23 && name == 'Bob'"

      code_wrapper <<-DATA
        def user_code(age, name)
          <%= user_code %>
        end
      DATA

      solution <<-DATA
age >= 23 && (name == 'Bob' || name == 'Jill')
      DATA

      specs <<-DATA
        it "when given an age 23 and name 'Bob', it should give true" do
          user_code(23, "Bob").should eq true
        end
        it "when given an age 25 and name 'Jill', it should give true" do
          user_code(25, "Jill").should eq true
        end
        it "when given an age 11 and name 'Bob', it should give false" do
          user_code(11, "Bob").should eq false
        end
        it "when given an age 4 and name 'Jill', it should give false" do
          user_code(4, "Jill").should eq false
        end
      DATA
    !release

  %p
    Just like the order of operations in mathematical expressions (PEMDAS anybody?),
    Ruby also has a set of laws governing the precedence of its various operators. However it is not something you need to be concerned about for now. Just make sure to use parantheses generously
    so that the order of operation is unambiguous to Ruby as well as for someone reading your code.

  %h3 Negating expressions
  %p
    Ruby lets you negate expressions using the <code>!</code> operator (read as 'not'). 
    For instance, <code>! (name == 'Jill')</code> will return false if the name is <code>Jill</code> and
    <code>true</code> for any other name.
  %p
    Now try writing a simple expression that accepts any name except <code>Bob</code>
  %p
    !enchant 3535
      exercise!
      short_name :expression_exercise_not

      code_wrapper <<-DATA
        def user_code(name)
          <%= user_code %>
        end
      DATA

      solution <<-DATA
        ! (name == 'Bob')
      DATA

      specs <<-DATA
        it "name 'Bob' is not acceptable" do
          user_code("Bob").should eq false
        end
        it "name 'Jill' should be acceptable" do
          user_code("Jill").should eq true
        end
      DATA
    !release
  %p
    Awesome! Now that you've learned the basics of writing boolean expressions in Ruby, let
    us see how we can use them to decide the flow of our application in the
    next lesson.

