title - The if..else construct

.section :if_statements, "Ruby Conditional Branching : the 'if' statement", 157
  %p
    You can use Ruby's Boolean Expressions to specifiy conditions using the usual <code>if..else</code> construct. 
    Let us take a look at a simple example:    
    
    !enchant 3049
      short_name :simple_if_example
      example!
      starting_code <<-DATA
        def check_sign(number)
          if number > 0
            "#{number} is positive"
          else
            "#{number} is negative"
          end        
        end
      DATA
      code_wrapper <<-DATA
        <%= user_code %>
        puts check_sign(-1)
        puts check_sign(1)
        puts check_sign(0)
      DATA
    !release
    
  %p    
    When you run the above example, it will tell you that <code>0 is negative</code>. But we know
    that zero is neither positive nor negative. How do we fix this program so that zero is treated separately?

  %p
    Ruby gives you the <code>elsif</code> keyword that helps you check for 
    multiple possibilities inside an <code>if..else</code> construct. Try using elsif 
    to fix the code below so that when the number is zero, it just prints <code>0</code>.

    !enchant 3050
      short_name :if_elsif
      exercise!
      starting_code <<-DATA
        def check_sign(number)
          if number > 0
            "#{number} is positive"
          else
            "#{number} is negative"
          end        
        end
      DATA
      
      code_wrapper <<-DATA
         <%= user_code %>         
      DATA
      
      solution <<-DATA
        def check_sign(number)
          if number == 0
            number
          elsif number > 0
            "#{number} is positive"
          else
            "#{number} is negative"
          end        
        end        
      DATA
      
      hint <<-DATA
        <code><pre>
          if <expression>
            # do this and that
          elsif <another expression>
            # something different.
          else
            # none of the above worked. this is where it finally ends.
          end
        </pre></code>
      DATA
      
      specs <<-DATA
        it "zero is considered to be neither positive nor negative" do
          result = check_sign(0).to_s.downcase.gsub('zero','0')
          result.should include '0'
          result.should_not include 'positive'
          result.should_not include 'negative'
        end
        it "the number 2 is considered positive" do
          check_sign(2).downcase.should include('positive')
        end
        it "the number -2 is considered negative" do
          check_sign(-2).downcase.should include('negative')
        end
      DATA
    !release

.section :truthiness, "Truthiness of objects in Ruby", 158
  %p
    The conditional statements <code>if</code> and <code>unless</code> can also use expressions that 
    return an object that is not either true or false.
  %p
    In such cases, the objects <strong><code>false</code> and <code>nil</code> equates to false</strong>. 
    <span class="tweetable" data-tweet='In Ruby every other object like say 1, 0, "" are all evaluated to be true.'>
    Every other object like say <code>1</code>, <code>0</code>, <code>""</code> are all evaluated to be <code>true</code>.</span>
    Here is a demonstration:
  
  !enchant 3054
    short_name :comparison_example
    example!
    starting_code <<-DATA
      if 0
        puts "Hey, 0 is considered to be a truth in Ruby" 
      end
    DATA
  !release


